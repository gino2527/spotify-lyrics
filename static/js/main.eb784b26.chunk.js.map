{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","localStorage","getItem","setInterval","axios","get","headers","Authorization","then","res","_this$state","state","title","artist","data","item","name","artists","setState","lyrics","concat","params","apikey","result","toLowerCase","track","text","catch","err","response","status","format","callback","q_track","q_artist","message","body","lyrics_body","window","removeItem","confirm","location","href","split","token","setItem","show","_this$state2","react_default","a","createElement","className","Fragment","id","length","Component","Boolean","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mRAwHeA,qBAnHb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KASRQ,kBAAoB,WAClB,GAAKC,aAAaC,QAAQ,eACxBC,YAAY,WACVC,IAAMC,IAAI,yDAA0D,CAClEC,QAAS,CACPC,cAAe,UAAYN,aAAaC,QAAQ,kBAGnDM,KAAK,SAAAC,GAAO,IAAAC,EACajB,EAAKkB,MAAvBC,EADKF,EACLE,MAAOC,EADFH,EACEG,OACRD,IAAUH,EAAIK,KAAKC,KAAKC,MAAQH,IAAWJ,EAAIK,KAAKC,KAAKE,QAAQ,GAAGD,MACvEvB,EAAKyB,SAAS,CACZH,KAAMN,EAAIK,KAAKC,KACfH,MAAOH,EAAIK,KAAKC,KAAKC,KACrBH,OAAQJ,EAAIK,KAAKC,KAAKE,QAAQ,GAAGD,KACjCG,OAAQ,IACP,WACDf,IAAMC,IAAN,8CAAAe,OAAwD3B,EAAKkB,MAAME,OAAnE,KAAAO,OAA6E3B,EAAKkB,MAAMC,OAAS,CAC/FS,OAAQ,CACNC,OAAQ,sEAGTd,KAAK,SAAAC,GACJ,GAAIA,EAAIK,KAAKS,OAAOV,OAAOG,KAAKQ,gBAAkB/B,EAAKkB,MAAME,OAAOW,cAClE,KAAM,MAEN/B,EAAKyB,SAAS,CACZC,OAAQV,EAAIK,KAAKS,OAAOE,MAAMC,SAInCC,MAAM,SAAAC,IACAA,EAAIC,UAAoC,MAAxBD,EAAIC,SAASC,QAA2B,QAARF,IACnDxB,IAAMC,IAAI,2FAA4F,CACpGgB,OAAQ,CACNU,OAAQ,OACRC,SAAU,QACVC,QAASxC,EAAKkB,MAAMC,MACpBsB,SAAUzC,EAAKkB,MAAME,OACrBS,OAAQ,sCAGTd,KAAK,SAAAC,GACJhB,EAAKyB,SAAS,CACZC,OAAQV,EAAIK,KAAKqB,QAAQC,KAAKjB,OAAOkB,sBAQtDV,MAAM,SAAAC,GACDA,EAAIC,UACsB,MAAxBD,EAAIC,SAASC,SACfQ,OAAOrC,aAAasC,WAAW,gBACwC,IAAnED,OAAOE,QAAQ,kDACjBF,OAAOG,SAASC,KAAO,uMAK9B,WAEH,GAAIJ,OAAOG,SAASC,KAAKC,MAAM,MAAM,GAAI,CACvC,IAAIC,EAAQN,OAAOG,SAASC,KAAKC,MAAM,MAAM,GAAGA,MAAM,KAAK,GAAGA,MAAM,KAAK,GACzEL,OAAOrC,aAAa4C,QAAQ,cAAeD,GAC3CN,OAAOG,SAASC,KAAO,uBAEwB,IAA3CJ,OAAOE,QAAQ,0BACjBF,OAAOG,SAASC,KAAO,oMA7E7BjD,EAAKkB,MAAQ,CACXI,KAAM,GACNI,OAAQ,GACR2B,MAAM,GANSrD,wEAsFV,IAAAsD,EAC+BnD,KAAKe,MAArCE,EADCkC,EACDlC,OAAQM,EADP4B,EACO5B,OAAQ2B,EADfC,EACeD,KAAMlC,EADrBmC,EACqBnC,MAC5B,OACEoC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAEdL,GACEE,EAAAC,EAAAC,cAAAF,EAAAC,EAAAG,SAAA,KACEJ,EAAAC,EAAAC,cAAA,KAAGG,GAAG,SAASzC,GACfoC,EAAAC,EAAAC,cAAA,KAAGG,GAAG,UAAUxC,GAEdM,EAAOmC,OAAS,EACdN,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UACVhC,GAEH6B,EAAAC,EAAAC,cAAA,KAAGG,GAAG,WAAWF,UAAU,UAEzBvC,GAASC,GAAU,gCAxGvB0C,cCQEC,QACW,cAA7BlB,OAAOG,SAASgB,UAEe,UAA7BnB,OAAOG,SAASgB,UAEhBnB,OAAOG,SAASgB,SAASC,MACvB,2DCZNC,IAASC,OAAOZ,EAAAC,EAAAC,cAACW,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1D,KAAK,SAAA2D,GACjCA,EAAaC","file":"static/js/main.eb784b26.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      item: {},\n      lyrics: '',\n      show: true\n    }\n  }\n  \n  componentDidMount = () => {\n    if ( localStorage.getItem('accessToken') ) {\n      setInterval(() => {\n        axios.get('https://api.spotify.com/v1/me/player/currently-playing', {\n          headers: {\n            Authorization: 'Bearer ' + localStorage.getItem('accessToken')\n          },\n        })\n        .then(res => {\n          let { title, artist } = this.state;\n          if ( title !== res.data.item.name || artist !== res.data.item.artists[0].name ) {\n            this.setState({\n              item: res.data.item,\n              title: res.data.item.name,\n              artist: res.data.item.artists[0].name,\n              lyrics: ''\n            }, () => {\n              axios.get(`https://orion.apiseeds.com/api/music/lyric/${this.state.artist}/${this.state.title}`, {\n                params: {\n                  apikey: 'oTpztYN2vcpQj7ytLawsK85q2DQX0nA9QFWBGNebaFdFooQmseyype52PRVNQZ0e'\n                }\n              })\n                .then(res => {\n                  if (res.data.result.artist.name.toLowerCase() !== this.state.artist.toLowerCase()) {\n                    throw 'err';\n                  } else {\n                    this.setState({\n                      lyrics: res.data.result.track.text\n                    })\n                  }\n                })\n                .catch(err => {\n                  if ((err.response && err.response.status === 404) || err === 'err') {\n                    axios.get('https://cors-anywhere.herokuapp.com/https://api.musixmatch.com/ws/1.1/matcher.lyrics.get', {\n                      params: {\n                        format: 'json',\n                        callback: 'jsonp',\n                        q_track: this.state.title,\n                        q_artist: this.state.artist,\n                        apikey: '81122af4e7182c602b1b83dda353e355'\n                      }\n                    })\n                      .then(res => {\n                        this.setState({\n                          lyrics: res.data.message.body.lyrics.lyrics_body\n                        })\n                      })\n                  }\n                })\n            })\n          }\n        })\n        .catch(err => {\n          if (err.response) {\n            if (err.response.status === 401) {\n              window.localStorage.removeItem('accessToken')\n              if (window.confirm('Token expired. Please reconnect with Spotify') === true) {\n                window.location.href = 'https://accounts.spotify.com/authorize?client_id=97f6ad504c9243aa8b8a22cd70e1b7c8&scope=user-read-currently-playing&redirect_uri=https://gino2527.github.io/spotify-lyrics/&response_type=token'\n              }\n            }\n          }\n        })\n      }, 1500)\n    } else {\n      if (window.location.href.split('/#')[1]) {\n        let token = window.location.href.split('/#')[1].split('&')[0].split('=')[1];\n        window.localStorage.setItem('accessToken', token);\n        window.location.href = '/spotify-lyrics';\n      } else {\n        if (window.confirm('Connect with Spotify') === true) {\n          window.location.href = 'https://accounts.spotify.com/authorize?client_id=97f6ad504c9243aa8b8a22cd70e1b7c8&scope=user-read-currently-playing&redirect_uri=https://gino2527.github.io/spotify-lyrics/&response_type=token'\n        }\n      }\n    }\n  }\n\n  render() {\n    let { artist, lyrics, show, title } = this.state;\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          {\n            show &&\n              <>\n                <p id='title'>{title}</p>\n                <p id='artist'>{artist}</p>\n                {\n                  lyrics.length > 0 ?\n                    <p className='lyrics'>\n                      {lyrics}\n                    </p> :\n                    <p id='fetching' className='lyrics'>\n                    {\n                      title && artist && 'Fetching lyrics...'\n                    }                      \n                    </p>\n                }\n              </>\n          }\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}